from __future__ import print_function
from six.moves import range
import numpy
import matplotlib.pyplot as plt
import scipy.integrate as integrate


def dudt_FVM(t,u_0):
    #a = 1
    #b = 2
    L = 1.0
    n = len(u_0)
    dx = L/(n-1)
    u = u_0
    f = u**2/2
    interface_left = f[:-1]
    interface_right = f[1:]
    
    #speed sign of our equation(direction of flow)
    speed =(f[1:]-f[:-1])*(u[1:]-u[:-1]) 
    
    # define the flux for different direction of flow:
    for i in range(len(speed)): 
        if speed[i] < 0:
            interface_left[i] = interface_right[i]
        else:
            interface_left[i] = interface_left[i]
    
    interface = numpy.zeros(len(interface_left)+2)
    # bounday at left (total)
    interface[0] = 0
    # boundary at right (total)
    interface[-1] = f[-1] 
    interface[1:-1] = interface_left
    dudt = (interface[:-1]-interface[1:])/dx
    return dudt
L = 1
m = 100
t_0     = 0.0
t_final = 1
u_true = lambda x, t: x / (1 + t)
t = numpy.linspace(t_0,t_final,m)
dt = (t[1]-t[0])
x = numpy.linspace(0,L,m)
#u_0 = u_true(x,t)
u_0 = numpy.sin(x*2*numpy.pi)
sol = integrate.solve_ivp(dudt_FVM,(t_0,t_final),u_0,dense_output = True)
U = sol.sol(t)
plt.plot(x,U[:,0],label='time order = 0')
plt.plot(x,U[:,10],label='time order = 10')
plt.plot(x,U[:,30],label='time order = 30')
plt.plot(x,U[:,60],label='time order = 60')
plt.plot(x,U[:,-1],label='time order = 100')
plt.xlabel('x')
plt.ylabel('U')
plt.legend()


